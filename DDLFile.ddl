-- Generated by Oracle SQL Developer Data Modeler 20.4.1.406.0906
--   at:        2021-04-07 19:41:07 CDT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

/** This table represents the different travel segments within a travel order. **/
CREATE TABLE book (
    book_id        INTEGER NOT NULL,
    booktype_id    INTEGER NOT NULL,
    departure_id   INTEGER NOT NULL,
    arrival_id     INTEGER NOT NULL,
    departuredate  VARCHAR(50) NOT NULL,
    arrivaldate    VARCHAR(50) NOT NULL
);

ALTER TABLE book ADD CONSTRAINT book_pk PRIMARY KEY ( book_id );

ALTER TABLE book ADD CONSTRAINT book_bookid_un UNIQUE ( book_id );

/** This table represents the different travel modes per travel segment. **/
CREATE TABLE booktype (
    name         VARCHAR2(25) NOT NULL,
    booktype_id  INTEGER NOT NULL
);

CREATE UNIQUE INDEX booktype__idx ON
    booktype (
        booktype_id
    ASC );

ALTER TABLE booktype ADD CONSTRAINT booktype_pk PRIMARY KEY ( booktype_id );

ALTER TABLE booktype ADD CONSTRAINT booktype_booktypeid_un UNIQUE ( booktype_id );

/** This table represents individuals whom have placed travel orders. **/
CREATE TABLE customer (
    customer_id  INTEGER NOT NULL,
    firstname    VARCHAR2(25) NOT NULL,
    age          INTEGER,
    lastname     VARCHAR2(25) NOT NULL
);

ALTER TABLE customer ADD CONSTRAINT customer_pk PRIMARY KEY ( customer_id );

ALTER TABLE customer ADD CONSTRAINT customer_customerid_un UNIQUE ( customer_id );

/** This table represents the financial aspects of a travel order. **/
CREATE TABLE invoice (
    locked      CHAR(1) NOT NULL,
    total       NUMBER(2, 6) NOT NULL,
    billto      VARCHAR2(50) NOT NULL,
    invoice_id  INTEGER NOT NULL
);

ALTER TABLE invoice ADD CONSTRAINT invoice_pk PRIMARY KEY ( invoice_id );

ALTER TABLE invoice ADD CONSTRAINT invoice_invoiceid_un UNIQUE ( invoice_id );

/** This table represents the different travel areas customers may choose to travel to and from. **/
CREATE TABLE location (
    airportcode  VARCHAR2(5),
    city         VARCHAR2(50) NOT NULL,
    state        VARCHAR(20),
    country      VARCHAR2(50),
    location_id  INTEGER NOT NULL
);

ALTER TABLE location ADD CONSTRAINT location_pk PRIMARY KEY ( location_id );

ALTER TABLE location ADD CONSTRAINT location_locationid_un UNIQUE ( location_id );

/** This table contains the travel orders associated to a customer. **/
CREATE TABLE ORDERS (
    order_id       INTEGER NOT NULL,
    customer_id    INTEGER NOT NULL,
    invoice_id     INTEGER NULL,
    departure_id   INTEGER NOT NULL,
    arrival_id     INTEGER NOT NULL,
    status_id      INTEGER NOT NULL,
    departuredate  DATE NOT NULL,
    arrivaldate    DATE NOT NULL
);

ALTER TABLE ORDERS ADD CONSTRAINT order_pk PRIMARY KEY ( order_id );

ALTER TABLE ORDERS ADD CONSTRAINT order_orderid_un UNIQUE ( order_id );

/** This table stored the different actions performed on a travel order. **/
CREATE TABLE OrdersAudit (
    audit_id  INTEGER NOT NULL,
    order_id       INTEGER NOT NULL,
    invoice_id    INTEGER NULL,
    status     VARCHAR(20) NOT NULL,
    OccurredDate   VARCHAR(50) NOT NULL
);

ALTER TABLE OrdersAudit ADD CONSTRAINT orderaudit_pk PRIMARY KEY ( audit_id );

ALTER TABLE OrdersAudit
    ADD CONSTRAINT OrdersAudit_Orders_fk FOREIGN KEY ( order_id )
        REFERENCES Orders ( order_id );

/** This table represents the relationship between a travel order and the different segments. **/
CREATE TABLE orderedbooks (
    orderedbook_id  INTEGER NOT NULL,
    order_id        INTEGER NOT NULL,
    book_id         INTEGER NOT NULL
);

ALTER TABLE orderedbooks ADD CONSTRAINT orderedbooks_pk PRIMARY KEY ( orderedbook_id );

ALTER TABLE orderedbooks ADD CONSTRAINT orderedbooks_orderedbookid_un UNIQUE ( orderedbook_id );

/** This table represents the state that a travel order. **/
CREATE TABLE status (
    status_id  INTEGER NOT NULL,
    name       VARCHAR2(25) NOT NULL
);

ALTER TABLE status ADD CONSTRAINT status_pk PRIMARY KEY ( status_id );

ALTER TABLE status ADD CONSTRAINT status_statusid_un UNIQUE ( status_id );

ALTER TABLE book
    ADD CONSTRAINT book_booktype_fk FOREIGN KEY ( booktype_id )
        REFERENCES booktype ( booktype_id );

ALTER TABLE book
    ADD CONSTRAINT book_location_fk FOREIGN KEY ( departure_id )
        REFERENCES location ( location_id );

ALTER TABLE book
    ADD CONSTRAINT book_location_fkv1 FOREIGN KEY ( arrival_id )
        REFERENCES location ( location_id );

ALTER TABLE Orders
    ADD CONSTRAINT order_customer_fk FOREIGN KEY ( customer_id )
        REFERENCES customer ( customer_id );

ALTER TABLE Orders
    ADD CONSTRAINT order_invoice_fk FOREIGN KEY ( invoice_id )
        REFERENCES invoice ( invoice_id )
            ON DELETE CASCADE;

ALTER TABLE Orders
    ADD CONSTRAINT order_location_fk FOREIGN KEY ( departure_id )
        REFERENCES location ( location_id );

ALTER TABLE Orders
    ADD CONSTRAINT order_location_fkv2 FOREIGN KEY ( arrival_id )
        REFERENCES location ( location_id );

ALTER TABLE Orders
    ADD CONSTRAINT order_status_fk FOREIGN KEY ( status_id )
        REFERENCES status ( status_id );

ALTER TABLE orderedbooks
    ADD CONSTRAINT orderedbooks_book_fk FOREIGN KEY ( book_id )
        REFERENCES book ( book_id )
            ON DELETE CASCADE;

ALTER TABLE orderedbooks
    ADD CONSTRAINT orderedbooks_order_fk FOREIGN KEY ( order_id )
        REFERENCES Orders ( order_id )
            ON DELETE CASCADE;

CREATE OR REPLACE TRIGGER fkntm_order BEFORE
    UPDATE OF customer_id, invoice_id ON Orders
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table Orders is violated');
END;
/

CREATE SEQUENCE book_book_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER book_book_id_trg BEFORE
    INSERT ON book
    FOR EACH ROW
    WHEN ( new.book_id IS NULL )
BEGIN
    :new.book_id := book_book_id_seq.nextval;
END;
/

CREATE SEQUENCE booktype_booktype_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER booktype_booktype_id_trg BEFORE
    INSERT ON booktype
    FOR EACH ROW
    WHEN ( new.booktype_id IS NULL )
BEGIN
    :new.booktype_id := booktype_booktype_id_seq.nextval;
END;
/

CREATE SEQUENCE customer_customer_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER customer_customer_id_trg BEFORE
    INSERT ON customer
    FOR EACH ROW
    WHEN ( new.customer_id IS NULL )
BEGIN
    :new.customer_id := customer_customer_id_seq.nextval;
END;
/

CREATE SEQUENCE invoice_invoice_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER invoice_invoice_id_trg BEFORE
    INSERT ON invoice
    FOR EACH ROW
    WHEN ( new.invoice_id IS NULL )
BEGIN
    :new.invoice_id := invoice_invoice_id_seq.nextval;
END;
/

CREATE SEQUENCE location_location_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER location_location_id_trg BEFORE
    INSERT ON location
    FOR EACH ROW
    WHEN ( new.location_id IS NULL )
BEGIN
    :new.location_id := location_location_id_seq.nextval;
END;
/

CREATE SEQUENCE order_order_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER order_order_id_trg BEFORE
    INSERT ON Orders
    FOR EACH ROW
    WHEN ( new.order_id IS NULL )
BEGIN
    :new.order_id := order_order_id_seq.nextval;
END;
/

CREATE SEQUENCE status_status_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER status_status_id_trg BEFORE
    INSERT ON status
    FOR EACH ROW
    WHEN ( new.status_id IS NULL )
BEGIN
    :new.status_id := status_status_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             1
-- ALTER TABLE                             26
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           8
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          7
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0


/*** TRIGGERS ***/
CREATE 
OR REPLACE TRIGGER orders_audit_trg AFTER INSERT 
OR 
UPDATE
   ON orders FOR EACH ROW 
   DECLARE StatusName VARCHAR(10);
BEGIN
   SELECT
      Name INTO StatusName 
   FROM
      Status 
   WHERE
      status.status_id = :new.status_id;
INSERT INTO
   ordersaudit (order_id, invoice_id, status, occurreddate) 
VALUES
   (
      :new.order_id,
      :new.invoice_id,
      StatusName,
      SYSTIMESTAMP 
   )
;
END
;
